
-- Criar tabela de profiles de usu치rios
CREATE TABLE public.profiles (
  id UUID NOT NULL REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
  email TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Criar tabela de avatares
CREATE TABLE public.avatares (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  nome TEXT NOT NULL,
  personalidade TEXT NOT NULL CHECK (personalidade IN ('friend', 'consultant', 'colleague')),
  tom TEXT NOT NULL CHECK (tom IN ('friendly', 'formal', 'playful')),
  avatar TEXT NOT NULL DEFAULT '游뱄',
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Criar tabela de mensagens/hist칩rico de conversa
CREATE TABLE public.mensagens (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  avatar_id UUID NOT NULL REFERENCES public.avatares ON DELETE CASCADE,
  conteudo TEXT NOT NULL,
  is_user BOOLEAN NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Ativar Row Level Security em todas as tabelas
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.avatares ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.mensagens ENABLE ROW LEVEL SECURITY;

-- Pol칤ticas para profiles
CREATE POLICY "Usu치rios podem ver seu pr칩prio perfil" ON public.profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Usu치rios podem criar seu pr칩prio perfil" ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Usu치rios podem atualizar seu pr칩prio perfil" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

-- Pol칤ticas para avatares
CREATE POLICY "Usu치rios podem ver seus pr칩prios avatares" ON public.avatares
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Usu치rios podem criar seus pr칩prios avatares" ON public.avatares
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Usu치rios podem atualizar seus pr칩prios avatares" ON public.avatares
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Usu치rios podem excluir seus pr칩prios avatares" ON public.avatares
  FOR DELETE USING (auth.uid() = user_id);

-- Pol칤ticas para mensagens
CREATE POLICY "Usu치rios podem ver suas pr칩prias mensagens" ON public.mensagens
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Usu치rios podem criar suas pr칩prias mensagens" ON public.mensagens
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Usu치rios podem excluir suas pr칩prias mensagens" ON public.mensagens
  FOR DELETE USING (auth.uid() = user_id);

-- Fun칞칚o para criar perfil automaticamente quando usu치rio se registra
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = ''
AS $$
BEGIN
  INSERT INTO public.profiles (id, email)
  VALUES (new.id, new.email);
  RETURN new;
END;
$$;

-- Trigger para criar perfil automaticamente
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
